# Merge the Uniq Results Generated by SnakefileSplit.smk
import os

BASE_DEFAULT_DIR = "out/{rib}/output/default/"
OUTPUT_DIR = "out/merged/"
siblings_output = ["", "_siblings"]
origins = list(range(1,10))
deep = list(range(1,4))

# Old Instance
rib_merged_output = [input for input in os.listdir('collector')]
BASE_DIR = "out/{rib}/output/"
tiers = [1, 12]
reference = ['', '-r']


rule sort_uniq_outputs:
    input:
        processed=expand(BASE_DEFAULT_DIR + "processed{siblings}/uniq/{origins}/{rib}.rib-geocom-{deep}-c{threshold}-o{origins}",
                        rib=[input for input in os.listdir('collector/')],
                        allow_missing=True)
    output:
        out_merged = OUTPUT_DIR + "processed{siblings,.*}/uniq/{origins}/merged.rib-geocom-{deep}-c{threshold}-o{origins}"

    shell:
        "sort -u {input.processed} > {output.out_merged}"


rule sort_deep_outputs:
    input:
        processed=expand(BASE_DEFAULT_DIR + "processed{siblings}/{deep}/{origins}/{rib}.rib-geocom-{deep}-c{threshold}-o{origins}",
                        rib=[input for input in os.listdir('collector/')],
                        allow_missing=True)
    output:
        out_merged = OUTPUT_DIR + "processed{siblings,.*}/{deep,[0-9]+}/{origins}/merged.rib-geocom-{deep}-c{threshold}-o{origins}"

    shell:
        "sort -u {input.processed} > {output.out_merged}"


rule sort_all_com:
    input:
        all_com = expand(BASE_DIR + "allcom/{rib}-allcom",
                        rib=[input for input in os.listdir('collector/')],
                        allow_missing=True)

    output:
        out_merged=OUTPUT_DIR + "allcom/merged-allcom"

    shell:
        "sort -u {input.all_com} > {output.out_merged}"


rule merge_short_com:
    input:
        short_comm = expand(BASE_DIR + "allcom/{rib}-allcom-o{origins}",
                            rib=[input for input in os.listdir('collector/')],
                            allow_missing=True)

    output:
        out_merged=OUTPUT_DIR + "allcom/merged-allcom-o{origins}"

    shell:
        "sort -u {input.short_comm} > {output.out_merged}"


rule merged_statistical:
    input:
        all_com = OUTPUT_DIR + "allcom/merged-allcom",
        short_comm = OUTPUT_DIR + "allcom/merged-allcom-o{origins}",
        entry = expand(OUTPUT_DIR + "processed{siblings}/{deep}/{origins}/merged.rib-geocom-{deep}-c{threshold}-o{origins}",
                    threshold = [f"0.{input}" for input in range(1,10)],
                    allow_missing=True)
    output:
        OUTPUT_DIR + "csv{siblings,.*}/merged-geocom-{deep}-o{origins}-t{tiers,[0-9]+}{reference,.*}.csv"

    params:
        dir_entry= OUTPUT_DIR + "processed{siblings,.*}/{deep}/{origins}/",
        tier = "{tiers}",
        ref = "{reference}"

    shell:
        "pypy3 bin/geocomcount.py -d {params.dir_entry} -c {input.all_com} -x {input.short_comm} -t {params.tier} {params.ref} -o {output}"


rule merge_csv:
    input:
        expand(OUTPUT_DIR + "csv{siblings}/merged-geocom-{deep}-o{origins}-t{tiers}{reference}.csv",
            rib=rib_merged_output,
            deep=deep + ["uniq"],
            origins=origins,
            allow_missing=True)
    output:
        OUTPUT_DIR + "csv{siblings,.*}-t{tiers,[0-9]+}{reference,.*}/all-geocom-agregated.csv"
    shell:
        "python3 bin/mergecsv.py {input} {output}"


rule merged_results:
    input:
        expand(OUTPUT_DIR + "csv{siblings}-t{tiers}{reference}/all-geocom-agregated.csv",
            siblings=siblings_output,
            reference=reference,
            tiers=tiers
        )
